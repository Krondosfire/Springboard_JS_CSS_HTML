Task:
Write a Person class with an instance variable, age, and a constructor that takes an integer, initialAge, as a parameter. 
The constructor must assign initialAge to age after confirming the argument passed as initialAge is not negative; if a negative argument is passed as , 
the constructor should set age to 0 and print Age is not valid, setting age to 0.. In addition, you must write the following instance methods:
1. yearPasses() should increase the age instance variable by 1.
2. amIOld() should perform the following conditional actions:
* If age < 13, print You are young..
* If age >= 13 and age < 18, print You are a teenager..
* Otherwise, print You are old..
To help you learn by example and complete this challenge, much of the code is provided for you, but you'll be writing everything in the future. 
The code that creates each instance of your Person class is in the main method. Don't worry if you don't understand it all quite yet!
Note: Do not remove or alter the stub code in the editor.
Input Format:
Input is handled for you by the stub code in the editor.
The first line contains an integer, T (the number of test cases), and the T subsequent lines each contain an integer denoting the age of a Person instance.
Constraints:
1 <= T <= 4;
-5 <= age <=30
"process.stdin.resume();
process.stdin.setEncoding('ascii');

var input_stdin = "";
var input_stdin_array = "";
var input_currentline = 0;

process.stdin.on('data', function (data) {
    input_stdin += data;
});

process.stdin.on('end', function () {
    input_stdin_array = input_stdin.split("\n");
    main();    
});

function readLine() {
    return input_stdin_array[input_currentline++];
}

function Person(initialAge){
    // Add some more code to run some checks on initialAge
  this.amIOld=function(){
   // Do some computations in here and print out the correct statement to the console

  };
   this.yearPasses=function(){
          // Increment the age of the person in here
   };
}

function main() {"




Complete the preOrder function in the editor below, which has 1 parameter: a pointer to the root of a binary tree. 
It must print the values in the tree's preorder traversal as a single line of space-separated values.
Input Format:
Our test code passes the root node of a binary tree to the preOrder function.
Constraints:
1 <= Nodes in the tree <= 500

"var Tree = function() {
    this.root = null;
}

Tree.prototype.insert = function(node, data) {
    if (node == null){
    	node = new Node(data);
    }
 	else if (data < node.data){
        node.left  = this.insert(node.left, data);
    }
    else{
        node.right = this.insert(node.right, data);   
    }

    return node;
}

var Node = function(data) {
    this.data = data;
    this.left = null;
    this.right = null;
}

/* head ends */

/*
    Node is defined as
    var Node = function(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
*/

// This is a "method-only" submission.
// You only need to complete this method.

function preOrder(root) {
	
}"




Huffman coding assigns variable length codewords to fixed length input characters based on their frequencies. 
More frequent characters are assigned shorter codewords and less frequent characters are assigned longer codewords. 
All edges along the path to a character contain a code digit. If they are on the left side of the tree, they will be a 0 (zero). 
If on the right, they'll be a 1 (one). Only the leaves will contain a letter and its frequency count. 
All other nodes will contain a null instead of a character, and the count of the frequency of all of it and its descendant characters.

For instance, consider the string ABRACADABRA. There are a total of 11 characters in the string. 
This number should match the count in the ultimately determined root of the tree. Our frequencies are A = 5, B = 2, R = 2, C = 1 and D = 1. 
The two smallest frequencies are for C and D, both equal to 1, so we'll create a tree with them. 
The root node will contain the sum of the counts of its descendants, in this case 1 + 1 = 2. 
The left node will be the first character encountered, C, and the right will contain D. 
Next we have 3 items with a character count of 2: the tree we just created, the character B and the character R. 
The tree came first, so it will go on the left of our new root node. B will go on the right. 
Repeat until the tree is complete, then fill in the 1's and 0's for the edges. 
Input characters are only present in the leaves. Internal nodes have a character value of Ï• (NULL). 
We can determine that our values for characters are:

A - 0
B - 111
C - 1100
D - 1101
R - 10
Our Huffman encoded string is:

A B    R  A C     A D     A B    R  A
0 111 10 0 1100 0 1101 0 111 10 0
or
01111001100011010111100
To avoid ambiguity, Huffman encoding is a prefix free encoding technique. No codeword appears as a prefix of any other codeword.
To decode the encoded string, follow the zeros and ones to a leaf and return the character there.
You are given pointer to the root of the Huffman tree and a binary coded string to decode. You need to print the decoded string.
Function Description:
Complete the function decode_huff in the editor below. It must return the decoded string.
decode_huff has the following parameters:
* root: a reference to the root node of the Huffman tree
* s: a Huffman encoded string
Input Format:
There is one line of input containing the plain string, s. Background code creates the Huffman tree then passes the 
head node and the encoded string to the function.
Constraints:
1 <= |s| <= 25

"function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});"



There is a given list of strings where each string contains only lowercase letters from a - j, inclusive. 
The set of strings is said to be a GOOD SET if no string is a prefix of another string. 
In this case, print GOOD SET. Otherwise, print BAD SET on the first line followed by the string being checked.
Note If two strings are identical, they are prefixes of each other.
Example: words = ['abcd', 'bcd', 'abcde', 'bcde']
Here 'abcd' is a prefix of 'abcde' and 'bcd' is a prefix of 'bcde'. Since 'abcde' is tested first, print
BAD SET  
abcde
words = ['ab','bc','cd']
No string is a prefix of another so print
GOOD SET 
Function Description:
Complete the noPrefix function in the editor below.
noPrefix has the following parameter(s):
- string words[n]: an array of strings
Prints:
- string(s): either GOOD SET or BAD SET on one line followed by the word on the next line. No return value is expected.
Input Format:
First line contains n, the size of words[].
Then next  lines each contain a string, words[i].
Constraints:
1 <= n <= 10^5
1 <= the length of words[i] <= 60
All letters in words[i] are in the range 'a' through 'j', inclusive.
"'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'noPrefix' function below.
 *
 * The function accepts STRING_ARRAY words as parameter.
 */

function noPrefix(words) {
    // Write your code here

}

function main() {" 



Task:
Given an integer, n, print its first 10 multiples. Each multiple n x i (where 1 <= i <= 10) should be printed on a new line in the form: n x i = result.
Example:
n = 3
The printout should look like this:

3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
3 x 6 = 18
3 x 7 = 21
3 x 8 = 24
3 x 9 = 27
3 x 10 = 30
Input Format:
A single integer, n.
Constraints:
2 <= n <= 20

"'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}



function main() {
    const n = parseInt(readLine().trim(), 10);
}"





Task:
Given a string, S, of length N that is indexed from 0 to N - 1, print its even-indexed and odd-indexed characters as 2 space-separated 
strings on a single line (see the Sample below for more detail).
Note: 0 is considered to be an even index.
Example:
s = adbecf
Print abc def
Input Format:
The first line contains an integer, T (the number of test cases).
Each line i of the T subsequent lines contain a string, S.
Constraints:
1 <= T <= 10
2 <= length of S <= 10000

"function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});
"

Task:
Given an array, A, of N integers, print A's elements in reverse order as a single line of space-separated numbers.
Example:
A = [1,2,3,4]
Print 4 3 2 1. Each integer is separated by one space.
Input Format:
The first line contains an integer, N (the size of our array).
The second line contains N space-separated integers that describe array A's elements.
Constraints:
1 <= N <= 1000
1 <= A[i] <= 10000, where A[i] is the i-th integer in the array.

"'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}



function main() {
    const n = parseInt(readLine().trim(), 10);

    const arr = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));
    // Reverse the array and join with spaces
    console.log(arr.reverse().join(' '));
}"


Task:
Complete the isPositive function below. It has one integer parameter, a. If the value of a is positive, it must return the string YES. 
Otherwise, it must throw an Error according to the following rules:
If a is 0, throw an Error with  message = Zero Error.
If a is negative, throw an Error with  message = Negative Error.
Input Format:
Locked stub code in the editor reads the following input from stdin and passes each value of a to the function as an argument:
The first line is an integer, n, denoting the number of times the function will be called with some a.
Each line i of the n subsequent lines contains an integer denoting some a.
Constraints:
1 <= n <= 5
-100 <= a <= 100

"'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the isPositive function.
 * If 'a' is positive, return "YES".
 * If 'a' is 0, throw an Error with the message "Zero Error"
 * If 'a' is negative, throw an Error with the message "Negative Error"
 */
function isPositive(a) {
    
}


function main() {
    const n = +(readLine());
    
    for (let i = 0; i < n; i++) {
        const a = +(readLine());
      
        try {
            console.log(isPositive(a));
        } catch (e) {
            console.log(e.message);
        }
    }
}"


Task:
We provide the implementation for a Rectangle class in the editor. Perform the following tasks:

Add an area method to Rectangle's prototype.
Create a Square class that satisfies the following:
It is a subclass of Rectangle.
It contains a constructor and no other methods.
It can use the Rectangle class' area method to print the area of a Square object.
Locked code in the editor tests the class and method implementations and prints the area values to STDOUT.
"class Rectangle {
    constructor(w, h) {
        this.w = w;
        this.h = h;
    }
}

/*
 *  Write code that adds an 'area' method to the Rectangle class' prototype
 */

/*
 * Create a Square class that inherits from Rectangle and implement its class constructor
 */


if (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {
    const rec = new Rectangle(3, 4);
    const sqr = new Square(3);
    
    console.log(rec.area());
    console.log(sqr.area());
} else {
    console.log(-1);
    console.log(-1);
}"


Task

Implement a simple calculator that performs the following operations on binary numbers: 
addition, subtraction, multiplication, and division. 
Note that division operation must be integer division only; for example, 1001/100 = 10, 1110/101=10, and 101/1=101.

The calculator's initial state must look like this:
Element IDs. Each element in the document must have an id, specified below:

innerHTML	id	Description/Behavior
res	Contains the result of button presses.
btns	A button container that displays all eight calculator buttons.
0	btn0	A button expressing binary digit .
1	btn1	A button expressing binary digit .
C	btnClr	A button to clear the contents of .
=	btnEql	A button to evaluate the contents of the expression in .
+	btnSum	A button for the addition operation.
-	btnSub	A button for the subtraction operation.
*	btnMul	A button for the multiplication operation.
/	btnDiv	A button for the integer division operation.
Styling. The document's elements must have the following styles:

body has a width of 33%.
res has a background-color of lightgray, a border that is solid, a height of 48px, and a font-size of 20px.
btn0 and btn1 have a background-color of lightgreen and a color of brown.
btnClr and btnEql have a background-color of darkgreen and a color of white.
btnSum, btnSub, btnMul, and btnDiv have a background-color of black, a color of red.
All the buttons in btns have a width of 25%, a height of 36px, a font-size of 18px, margin of 0px, and float value left.

Constraints

All expressions in the test dataset are entered in the form operand1 --> operator --> operand2, 
where operand1 is the first binary number, operand2 is the second binary number, and operator is in the set {+,-,*,=}.
Both operands will always be positive integers when converted from base-2 to base-10.
All expressions will be valid.

<!DOCTYPE html>
<html>
<head>
    <title>Binary Calculator</title>
    <style>
        body {
            width: 33%;
        }
        #res {
            background-color: lightgray;
            border: solid;
            height: 48px;
            font-size: 20px;
            margin-bottom: 10px;
            text-align: right;
            padding: 5px;
            overflow-x: auto;
        }
        #btns {
            width: 100%;
        }
        #btns button {
            width: 25%;
            height: 36px;
            font-size: 18px;
            margin: 0px;
            float: left;
        }
        #btn0, #btn1 {
            background-color: lightgreen;
            color: brown;
        }
        #btnClr, #btnEql {
            background-color: darkgreen;
            color: white;
        }
        #btnSum, #btnSub, #btnMul, #btnDiv {
            background-color: black;
            color: red;
        }
    </style>
</head>
<body>
    <div id="res"></div>
    <div id="btns">
        <button id="btn0">0</button>
        <button id="btn1">1</button>
        <button id="btnClr">C</button>
        <button id="btnEql">=</button>
        <button id="btnSum">+</button>
        <button id="btnSub">-</button>
        <button id="btnMul">*</button>
        <button id="btnDiv">/</button>
    </div>
    <script>
        const res = document.getElementById('res');
        document.getElementById('btn0').onclick = () => res.innerHTML += '0';
        document.getElementById('btn1').onclick = () => res.innerHTML += '1';
        document.getElementById('btnSum').onclick = () => {
            if (res.innerHTML !== '' && !/[+\-*/]$/.test(res.innerHTML)) res.innerHTML += '+';
        };
        document.getElementById('btnSub').onclick = () => {
            if (res.innerHTML !== '' && !/[+\-*/]$/.test(res.innerHTML)) res.innerHTML += '-';
        };
        document.getElementById('btnMul').onclick = () => {
            if (res.innerHTML !== '' && !/[+\-*/]$/.test(res.innerHTML)) res.innerHTML += '*';
        };
        document.getElementById('btnDiv').onclick = () => {
            if (res.innerHTML !== '' && !/[+\-*/]$/.test(res.innerHTML)) res.innerHTML += '/';
        };
        document.getElementById('btnClr').onclick = () => res.innerHTML = '';
        document.getElementById('btnEql').onclick = () => {
            // Find the operator
            let expr = res.innerHTML;
            let match = expr.match(/^([01]+)([+\-*/])([01]+)$/);
            if (!match) return;
            let op1 = parseInt(match[1], 2);
            let operator = match[2];
            let op2 = parseInt(match[3], 2);
            let result;
            switch (operator) {
                case '+': result = op1 + op2; break;
                case '-': result = op1 - op2; break;
                case '*': result = op1 * op2; break;
                case '/': result = Math.floor(op1 / op2); break; // integer division
            }
            res.innerHTML = result.toString(2);
        };
    </script>
</body>
</html>


Task
Complete the function in the editor. It has two parameters: a and b. It must return an object modeling a rectangle that has the following properties:
length: This value is equal to a.
width: This value is equal to b.
perimeter: This value is equal to 2 * (a + b).
area: This value is equal to a * b.
Note: The names of the object's properties must be spelled correctly to pass this challenge.
Input Format:
The first line contains an integer denoting a.
The second line contains an integer denoting b.
Constraints:
1 <= a,b <= 100

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the Rectangle function
 */
function Rectangle(a, b) {
    
}


function main() {
    const a = +(readLine());
    const b = +(readLine());
    
    const rec = new Rectangle(a, b);
    
    console.log(rec.length);
    console.log(rec.width);
    console.log(rec.perimeter);
    console.log(rec.area);
}


Task:
Declare a constant variable, PI, and assign it the value Math.PI. You will not pass this challenge unless the variable is declared as a constant and named PI (uppercase).
Read a number, r, denoting the radius of a circle from stdin.
Use PI and r to calculate the area and perimeter of a circle having radius r.
Print area as the first line of output and print perimeter as the second line of output.
Input Format:
A single integer, r, denoting the radius of a circle.
Constraints:
0 < r <= 100
r is a floating-point number scaled to at most 3 decimal places.
'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function main() {
    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.
    
    // Print the area of the circle:
    
    // Print the perimeter of the circle:

    try {    
          // Attempt to redefine the value of constant variable PI
        PI = 0;
        // Attempt to print the value of PI
        console.log(PI);
    } catch(error) {
        console.error("You correctly declared 'PI' as a constant.");
    }
}



Task:
Complete the getGrade(score) function in the editor. It has one parameter: an integer, score, denoting the number of points Julia earned on an exam. 
It must return the letter corresponding to her grade according to the following rules:

If 25 < score <= 30, then grade = A.
If 20 < score <= 25, then grade = B.
If 15 < score <= 20, then grade = C.
If 10 < score <= 15, then grade = D.
If 5 < score <= 10, then grade = E.
If 0 < score <= 5, then grade = F.
Input Format:
Stub code in the editor reads a single integer denoting score from stdin and passes it to the function.
Constraints:
0 <= score <= 30

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function getGrade(score) {
    let grade;
    // Write your code here
    
    return grade;
}


function main() {
    const score = +(readLine());
    
    console.log(getGrade(score));
}
































